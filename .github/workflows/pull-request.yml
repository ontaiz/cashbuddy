name: Pull Request CI

on:
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

  unit-test:
    name: Unit Tests
    needs: lint
    runs-on: ubuntu-latest

    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 30

  e2e-test:
    name: E2E Tests
    needs: lint
    runs-on: ubuntu-latest
    environment: integration
    
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      E2E_USERNAME_ID: ${{ secrets.E2E_USERNAME_ID }}
      E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
      E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install chromium --with-deps

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 30

      - name: Upload E2E coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-coverage
          path: coverage/
          retention-days: 30

  status-comment:
    name: Post Status Comment
    needs: [lint, unit-test, e2e-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download unit test coverage
        uses: actions/download-artifact@v5
        continue-on-error: true
        with:
          name: unit-test-coverage
          path: coverage-unit/

      - name: Download E2E coverage
        uses: actions/download-artifact@v5
        continue-on-error: true
        with:
          name: e2e-coverage
          path: coverage-e2e/

      - name: Create status comment
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const lintStatus = '${{ needs.lint.result }}';
            const unitTestStatus = '${{ needs.unit-test.result }}';
            const e2eTestStatus = '${{ needs.e2e-test.result }}';
            
            const statusEmoji = (status) => {
              if (status === 'success') return '✅';
              if (status === 'failure') return '❌';
              if (status === 'cancelled') return '⚠️';
              return '⏭️';
            };
            
            const overallSuccess = lintStatus === 'success' && 
                                   unitTestStatus === 'success' && 
                                   e2eTestStatus === 'success';
            
            const comment = `## 🔍 Pull Request CI Status
            
            | Job | Status |
            |-----|--------|
            | Lint | ${statusEmoji(lintStatus)} ${lintStatus} |
            | Unit Tests | ${statusEmoji(unitTestStatus)} ${unitTestStatus} |
            | E2E Tests | ${statusEmoji(e2eTestStatus)} ${e2eTestStatus} |
            
            ### Overall Result: ${overallSuccess ? '✅ All checks passed!' : '❌ Some checks failed'}
            
            ---
            
            **Commit:** ${{ github.event.pull_request.head.sha }}
            **Workflow Run:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            // Find existing comment from this workflow
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Pull Request CI Status')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

